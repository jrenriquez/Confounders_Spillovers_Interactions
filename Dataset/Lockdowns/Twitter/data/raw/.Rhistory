shares_week <- left_join(shares_week, omega_week, by = c('week', 'PCCMajDesc')) %>%
left_join(c_barra2, by = c('week', 'network'))   %>%
select(week, PCCMajCode, PCCMajDesc, ranking_sharesMediaType, omega, max_ads, everything())
shares_week
View(shares_week)
save(shares_week, file = paste0(out, 'shares_week.Rda'))
View(ranking)
install.packages("censusapi")
# Add key to .Renviron
Sys.setenv(CENSUS_KEY="d9ab46a0265e830aff8596a13cf15a2d023f661a")
# Reload .Renviron
readRenviron("~/.Renviron")
# Check to see that the expected key is output in your R console
Sys.getenv("CENSUS_KEY")
library('censusapi')
## Variables:
listCensusMetadata(name="2016/pep/housing", type = "variables")
## Geographical level of aggregation:
listCensusMetadata(name="2016/pep/housing", type = "geography")
hou.county <- getCensus(name="2016/pep/housing",
vars=c("DATE_DESC",
"DIVISION",
"COUNTY",
"LASTUPDATE",
"STATE",
"DATE",
"GEONAME",
"NATION",
"REGION",
"HUEST",
"SUMLEV"),
region="county:*")
hou.county <- getCensus(name="2016/pep/housing",
vars=c("DATE_DESC",
"DIVISION",
"COUNTY",
"LASTUPDATE",
"STATE",
#"DATE",
"GEONAME",
"NATION",
"REGION",
"HUEST",
"SUMLEV"),
region="county:*")
## Variables
pdbtract <- listCensusMetadata(name="2015/pdb/tract", type = "variables")
head(pdbtract)
## Geographical level of aggregation:
listCensusMetadata(name="2015/pdb/tract", type = "geography")
## List of all the counties
do <- unique(cbind(hou.county$STATE, hou.county$COUNTY))
getCensus()
?getCensus()
# Add key to .Renviron
Sys.setenv(CENSUS_KEY="d9ab46a0265e830aff8596a13cf15a2d023f661a")
# Reload .Renviron
readRenviron("~/.Renviron")
# Check to see that the expected key is output in your R console
Sys.getenv("CENSUS_KEY")
library('censusapi')
## Variables:
listCensusMetadata(name="2016/pep/housing", type = "variables")
## Geographical level of aggregation:
listCensusMetadata(name="2016/pep/housing", type = "geography")
hou.county <- getCensus(name="2016/pep/housing",
vars=c("DATE_DESC",
"DIVISION",
"COUNTY",
"LASTUPDATE",
"STATE",
"DATE",
"GEONAME",
"NATION",
"REGION",
"HUEST",
"SUMLEV"),
region="county:*")
## Variables
pdbtract <- listCensusMetadata(name="2015/pdb/tract", type = "variables")
head(pdbtract)
## Geographical level of aggregation:
listCensusMetadata(name="2015/pdb/tract", type = "geography")
as.character(pdbtract$name[grep("18_", pdbtract$name)])
as.character(pdbtract$name[grep("18_", pdbtract$name)])
as.character(pdbtract$name[grep("65p", pdbtract$name)])
## Extracting the names of the variables of interest
list.18 <- as.character(pdbtract$name[grep("18_", pdbtract$name)])
list.25 <- as.character(pdbtract$name[grep("25_", pdbtract$name)])
list.45 <- as.character(pdbtract$name[grep("45_", pdbtract$name)])
list.65 <- as.character(pdbtract$name[grep("65p", pdbtract$name)])
list <- c(list.18, list.25, list.45, list.65)
list
houc <- list()
suppressWarnings(suppressMessages(library(doParallel)))
nc <- detectCores()
cl <- makeCluster(nc)
registerDoParallel(cl)
do
unique(cbind(hou.county$STATE, hou.county$COUNTY))
hou.county
getCensus(name="2016/pep/housing",
vars=c("DATE_DESC",
"DIVISION",
"COUNTY",
"LASTUPDATE",
"STATE",
"DATE",
"GEONAME",
"NATION",
"REGION",
"HUEST",
"SUMLEV"))
getCensus(name="2016/pep/housing",
vars=c("DATE_DESC",
"DIVISION",
"COUNTY",
"LASTUPDATE",
"STATE",
"DATE",
"GEONAME",
"NATION",
"REGION",
"HUEST",
"SUMLEV"),
region="county")
hou.county <- getCensus(name="2016/pep/housing",
vars=c("DATE_DESC",
"DIVISION",
"COUNTY",
"LASTUPDATE",
"STATE",
"DATE",
"GEONAME",
"NATION",
"REGION",
"HUEST",
"SUMLEV"),
region="county:*")
hou.county <- getCensus(name="2016/pep/housing",
vars=c("DATE_DESC",
"DIVISION",
"COUNTY",
"LASTUPDATE",
"STATE",
"DATE_",
"GEONAME",
"NATION",
"REGION",
"HUEST",
"SUMLEV"),
region="county:*")
hou.county
dim(hou.county[grep("2016 popu", hou.county$DATE_DESC), ])
## List of all the counties
do <- unique(cbind(hou.county$STATE, hou.county$COUNTY))
do
houc <- foreach(i = 1:nrow(do)) %dopar% {
Sys.setenv(CENSUS_KEY="d9ab46a0265e830aff8596a13cf15a2d023f661a")
Sys.getenv("CENSUS_KEY")
library('censusapi')
temp <- paste0("state:", do[i, 1], "+county:", do[i, 2])
temp.0 <- try(getCensus(name="2015/pdb/tract", vars = c("State", "County", "Tract", list), region="tract:*", regionin = temp), silent = T)
if(is(temp.0, "try-error")) {
temp.1 <- NA
} else {
temp.1 <- getCensus(name="2015/pdb/tract", vars = c("State", "County", "Tract", list), region="tract:*", regionin = temp)
}
temp.1
}
## Variables:
listCensusMetadata(name="2019/pep/housing", type = "variables")
## Variables:
listCensusMetadata(name="2020/pep/housing", type = "variables")
## Variables:
listCensusMetadata(name="2019/pep/population", type = "variables")
## Geographical level of aggregation:
listCensusMetadata(name="2016/pep/population", type = "geography")
pop.county <- getCensus(name="2016/pep/population",
vars=c("DATE_DESC",
"DIVISION",
"COUNTY",
"LASTUPDATE",
"STATE",
"DATE_",
"GEONAME",
"NATION",
"REGION",
"HUEST",
"SUMLEV"),
region="county:*")
## Variables:
listCensusMetadata(name="2019/pep/population", type = "variables")
pop.county <- getCensus(name="2016/pep/population",
vars=c("DATE_DESC",
"DIVISION",
"COUNTY",
"LASTUPDATE",
"STATE",
"DATE_",
"GEONAME",
"NATION",
"REGION",
#"HUEST",
"SUMLEV"),
region="county:*")
pop.county
dim(hou.county[grep("2016 popu", hou.county$DATE_DESC), ])
## Geographical level of aggregation:
listCensusMetadata(name="2019/pep/population", type = "geography")
dim(hou.county[grep("2019 popu", hou.county$DATE_DESC), ])
dim(pop.county[grep("2019 popu", hou.county$DATE_DESC), ])
pop.county
pop.county <- getCensus(name="2019/pep/population",
vars=c("DATE_DESC",
"DIVISION",
"COUNTY",
"LASTUPDATE",
"STATE",
"DATE_",
"GEONAME",
"NATION",
"REGION",
#"HUEST",
"SUMLEV"),
region="county:*")
## Geographical level of aggregation:
listCensusMetadata(name="2019/pep/population", type = "geography")
## Variables:
listCensusMetadata(name="2019/pep/population", type = "variables")
## Variables:
listCensusMetadata(name="2019/pep/population", type = "variables")$name
pop.county <- getCensus(name="2019/pep/population",
vars=c("DATE_DESC",
"DIVISION",
"COUNTY",
"LASTUPDATE",
"STATE",
#"DATE_",
"GEONAME",
"NATION",
"REGION",
"POP",
"SUMLEV"),
region="county:*")
## Variables:
listCensusMetadata(name="2019/pep/population", type = "variables")$name
listCensusMetadata(name="2019/pdb/tract", type = "variables")
## Variables
pdbtract <- listCensusMetadata(name="2019/pdb/tract", type = "variables")
head(pdbtract)
## Geographical level of aggregation:
listCensusMetadata(name="2019/pdb/tract", type = "geography")
## Geographical level of aggregation:
listCensusMetadata(name="2016/pdb/tract", type = "geography")
## Geographical level of aggregation:
listCensusMetadata(name="2019/pdb/tract", type = "geography")
do
## Extracting the names of the variables of interest
list.18 <- as.character(pdbtract$name[grep("18_", pdbtract$name)])
list.18
list.25 <- as.character(pdbtract$name[grep("25_", pdbtract$name)])
list.45 <- as.character(pdbtract$name[grep("45_", pdbtract$name)])
list.65 <- as.character(pdbtract$name[grep("65p", pdbtract$name)])
list.65
list <- c(list.18, list.25, list.45, list.65)
list
houc <- list()
suppressWarnings(suppressMessages(library(doParallel)))
nc <- detectCores()
cl <- makeCluster(nc)
registerDoParallel(cl)
houc <- foreach(i = 1:nrow(do)) %dopar% {
Sys.setenv(CENSUS_KEY="d9ab46a0265e830aff8596a13cf15a2d023f661a")
Sys.getenv("CENSUS_KEY")
library('censusapi')
temp <- paste0("state:", do[i, 1], "+county:", do[i, 2])
temp.0 <- try(getCensus(name="2015/pdb/tract", vars = c("State", "County", "Tract", list), region="tract:*", regionin = temp), silent = T)
if(is(temp.0, "try-error")) {
temp.1 <- NA
} else {
temp.1 <- getCensus(name="2015/pdb/tract", vars = c("State", "County", "Tract", list), region="tract:*", regionin = temp)
}
temp.1
}
houc
stopCluster(cl)
houc <- do.call('rbind', houc)
head(houc)
houc
houc <- list()
list
do
nc
houc <- list()
suppressWarnings(suppressMessages(library(doParallel)))
nc <- detectCores()
cl <- makeCluster(nc)
registerDoParallel(cl)
houc <- foreach(i = 1:nrow(do)) %dopar% {
Sys.setenv(CENSUS_KEY="d9ab46a0265e830aff8596a13cf15a2d023f661a")
Sys.getenv("CENSUS_KEY")
library('censusapi')
temp <- paste0("state:", do[i, 1], "+county:", do[i, 2])
temp.0 <- try(getCensus(name="2019/pdb/tract", vars = c("State", "County", "Tract", list), region="tract:*", regionin = temp), silent = T)
if(is(temp.0, "try-error")) {
temp.1 <- NA
} else {
temp.1 <- getCensus(name="2019/pdb/tract", vars = c("State", "County", "Tract", list), region="tract:*", regionin = temp)
}
temp.1
}
houc
temp
cl
stopCluster(cl)
do
do[3:]
do
do[1:3, ]
do_temp <- do[1:3, ]
houc <- list()
suppressWarnings(suppressMessages(library(doParallel)))
nc <- detectCores()
cl <- makeCluster(nc)
registerDoParallel(cl)
do_temp <- do[1:3, ]
houc <- foreach(i = 1:nrow(do_temp)) %dopar% {
Sys.setenv(CENSUS_KEY="d9ab46a0265e830aff8596a13cf15a2d023f661a")
Sys.getenv("CENSUS_KEY")
library('censusapi')
temp <- paste0("state:", do_temp[i, 1], "+county:", do_temp[i, 2])
temp.0 <- try(getCensus(name="2019/pdb/tract", vars = c("State", "County", "Tract", list), region="tract:*", regionin = temp), silent = T)
if(is(temp.0, "try-error")) {
temp.1 <- NA
} else {
temp.1 <- getCensus(name="2019/pdb/tract", vars = c("State", "County", "Tract", list), region="tract:*", regionin = temp)
}
temp.1
}
stopCluster(cl)
houc <- do.call('rbind', houc)
head(houc)
View(houc)
pdbtract
pdbtract$name[grep("65p", pdbtract$name)]
houc
head(houc)
pdbtract
pdbtract
houc
## Variables:
pdbblockg <- listCensusMetadata(name="2019/pdb/blockgroup", type = "variables")
pdbblockg
## Geographical level of aggregation:
listCensusMetadata(name="2019/pdb/blockgroup", type = "geography")
houc$State
houc$Tract
## Variables:
listCensusMetadata(name="2019/pep/housing", type = "variables")$name
# Add key to .Renviron
Sys.setenv(CENSUS_KEY="d9ab46a0265e830aff8596a13cf15a2d023f661a")
# Reload .Renviron
readRenviron("~/.Renviron")
# Check to see that the expected key is output in your R console
Sys.getenv("CENSUS_KEY")
library('censusapi')
## Variables:
listCensusMetadata(name="2019/pep/housing", type = "variables")
## Variables:
listCensusMetadata(name="2016/pep/housing", type = "variables")
## Variables:
listCensusMetadata(name="2019/pep/population", type = "variables")
## Geographical level of aggregation:
listCensusMetadata(name="2019/pep/housing", type = "geography")
## Geographical level of aggregation:
listCensusMetadata(name="2019/pep/population", type = "geography")
hou.county <- getCensus(name="2019/pep/population",
vars=c("DATE_DESC",
"DIVISION",
"COUNTY",
"LASTUPDATE",
"STATE",
"DATE_",
"GEONAME",
"NATION",
"REGION",
"HUEST",
"SUMLEV"),
region="county:*")
hou.county <- getCensus(name="2019/pep/population",
vars=c("DATE_DESC",
"DIVISION",
"COUNTY",
"LASTUPDATE",
"STATE",
"DATE",
"GEONAME",
"NATION",
"REGION",
"HUEST",
"SUMLEV"),
region="county:*")
## Variables:
listCensusMetadata(name="2019/pep/population", type = "variables")
hou.county <- getCensus(name="2019/pep/population",
vars=c("DATE_DESC",
"DIVISION",
"COUNTY",
"LASTUPDATE",
"STATE",
"DATE_CODE",
"GEONAME",
"NATION",
"REGION",
"HUEST",
"SUMLEV"),
region="county:*")
## Variables:
listCensusMetadata(name="2019/pep/population", type = "variables")
hou.county <- getCensus(name="2019/pep/population",
vars=c("DATE_DESC",
"DIVISION",
"COUNTY",
"LASTUPDATE",
"STATE",
"DATE_CODE",
"GEO_ID",
"NATION",
"REGION",
"HUEST",
"SUMLEV"),
region="county:*")
hou.county <- getCensus(name="2019/pep/population",
vars=c("DATE_DESC",
"DIVISION",
"COUNTY",
"LASTUPDATE",
"STATE",
"DATE_CODE",
"GEO_ID",
"NATION",
"REGION",
#"HUEST",
"SUMLEV"),
region="county:*")
hou.county <- getCensus(name="2019/pep/population",
vars=c("DATE_DESC",
"DIVISION",
"COUNTY",
"LASTUPDATE",
"STATE",
"DATE_CODE",
"GEO_ID",
"NATION",
"REGION"),
#"HUEST",
#"SUMLEV"),
region="county:*")
hou.county
dim(hou.county[grep("2016 popu", hou.county$DATE_DESC), ])
hou.county
## Variables
pdbtract <- listCensusMetadata(name="2019/pdb/tract", type = "variables")
pdbtract
head(pdbtract)
## Geographical level of aggregation:
listCensusMetadata(name="2019/pdb/tract", type = "geography")
unique(cbind(hou.county$STATE, hou.county$COUNTY))
## List of all the counties
do <- unique(cbind(hou.county$STATE, hou.county$COUNTY))
## Extracting the names of the variables of interest
list.18 <- as.character(pdbtract$name[grep("18_", pdbtract$name)])
list.25 <- as.character(pdbtract$name[grep("25_", pdbtract$name)])
list.45 <- as.character(pdbtract$name[grep("45_", pdbtract$name)])
list.65 <- as.character(pdbtract$name[grep("65p", pdbtract$name)])
list.65
list
list <- c(list.18, list.25, list.45, list.65)
list
pdbtract
pdbtract$name
pdbtract
head(pdbtract)
View(pdbtract)
houc <- list()
suppressWarnings(suppressMessages(library(doParallel)))
nc <- detectCores()
cl <- makeCluster(nc)
registerDoParallel(cl)
houc <- foreach(i = 1:nrow(do)) %dopar% {
Sys.setenv(CENSUS_KEY="d9ab46a0265e830aff8596a13cf15a2d023f661a")
Sys.getenv("CENSUS_KEY")
library('censusapi')
temp <- paste0("state:", do[i, 1], "+county:", do[i, 2])
temp.0 <- try(getCensus(name="2019/pdb/tract", vars = c("State", "County", "Tract", list), region="tract:*", regionin = temp), silent = T)
if(is(temp.0, "try-error")) {
temp.1 <- NA
} else {
temp.1 <- getCensus(name="2019/pdb/tract", vars = c("State", "County", "Tract", list), region="tract:*", regionin = temp)
}
temp.1
}
out <- './cam.blanes Dropbox/Camila Blanes/Camila_Gabriel_projects/covid/data/processed/'
load('~/cam.blanes Dropbox/Camila Blanes/Camila_Gabriel_projects/Advertising_Polarization/Demand_viewers/data/new_data/output/panel_main.RData')
library('tidyverse')
setwd('~/cam.blanes Dropbox/Camila Blanes/COVID-19 Mexico/Twitter/data/raw/')
setwd('~/cam.blanes Dropbox/Camila Blanes/COVID-19 Mexico/Twitter/data/raw/')
data <- read_csv('tweets.csv')
View(data)
write_csv(data, file = 'data.csv')
write_csv(data, 'data.csv')
